<?php

/**
 * @file
 * Contains module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;

/*
 *
 * LAYOUT BUILDER COMPONENTS (BLOCKS)
 *
 */

/**
 * Implements hook_form_alter().
 *
 * Modify the configuration form for layout builder components (blocks).
 */
function layout_builder_classes_form_alter(&$form, FormStateInterface $formState) {
  if ($form['#form_id'] === 'layout_builder_add_block' || $form['#form_id'] === 'layout_builder_update_block') {
    $styles_manager = \Drupal::service('plugin.manager.style_plugin');
    /** @var \Drupal\layout_builder\Form\ConfigureBlockFormBase $formObject */
    $formObject = $formState->getFormObject();
    $styles = $styles_manager->getDefinitions();
    if (!empty($styles)) {
      $component = $formObject->getCurrentComponent();
      $selected = $component->get('layout_builder_classes') ?: [];
      $extra = $component->get('layout_builder_classes_extra') ?: '';
      $styles_manager->alterForm($form, $styles, $selected, $extra);
      // Our submit handler must execute before the default one, because the
      // default handler stores the section & component data in the tempstore
      // and we need to update those objects before that happens.
      array_unshift($form['#submit'], '_layout_builder_classes_submit_block_form');
    }
  }
}

/**
 * Custom submit handler for submitting LB block forms.
 *
 * Persists the configured block style to the component configuration data,
 * which is later persisted to section storage by layout builder's base form.
 */
function _layout_builder_classes_submit_block_form(array $form, FormStateInterface $formState) {
  /** @var \Drupal\layout_builder\Form\ConfigureBlockFormBase $formObject */
  $formObject = $formState->getFormObject();
  $component = $formObject->getCurrentComponent();
  $selected = [];
  foreach ($form as $id => $element) {
    if (strpos($id, 'layout_builder_class_') === 0) {
      $value = $formState->getValue($id);
      $id = str_replace('layout_builder_class_', '', $id);
      $selected[$id] = $value;
    }
  }
  $component->set('layout_builder_classes', $selected);
  $component->set('layout_builder_classes_extra', $formState->getValue('_layout_builder_classes_extra'));
}

/*
 *
 * LAYOUT BUILDER SECTIONS (LAYOUTS)
 *
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the configuration form for layout builder sections (layouts).
 */
function layout_builder_classes_form_layout_builder_configure_section_alter(&$form, FormStateInterface $form_state, $form_id) {
  $styles_manager = \Drupal::service('plugin.manager.style_plugin');
  $styles = \Drupal::service('plugin.manager.style_plugin')->getDefinitions();
  if (!empty($styles)) {
    $formObject = $form_state->getFormObject();
    if ($section = $formObject->getCurrentSection()) {
      $selected = $section->getThirdPartySetting('layout_builder_classes', 'selected') ?: [];
      $extra = $section->getThirdPartySetting('layout_builder_classes', 'extra') ?: '';
      $styles_manager->alterForm($form, $styles, $selected, $extra);
      // Our submit handler must execute before the default one, because the
      // default handler stores the section & component data in the tempstore
      // and we need to update those objects before that happens.
      array_unshift($form['#submit'], '_layout_builder_classes_submit_section_form');
    }
  }
}

/**
 * Custom submit handler for submitting LB section forms.
 *
 * This is used to persist the selected style to the layout configuration
 * array, which layout builder's ConfigureSectionForm will persist to section
 * storage.
 */
function _layout_builder_classes_submit_section_form(array $form, FormStateInterface $formState) {
  $selected = [];
  foreach ($form as $id => $element) {
    if (strpos($id, 'layout_builder_class_') === 0) {
      $value = $formState->getValue($id);
      $id = str_replace('layout_builder_class_', '', $id);
      $selected[$id] = $value;
    }
  }
  $formObject = $formState->getFormObject();
  $section = $formObject->getCurrentSection();
  $section->setThirdPartySetting('layout_builder_classes', 'selected', $selected);
  $section->setThirdPartySetting('layout_builder_classes', 'extra', $formState->getValue('_layout_builder_classes_extra'));
}


/**
 * Implementation of hook_element_info_alter().
 *
 * Because hook_preproces_layout() deals only with layouts rendered by 
 * \Drupal::service('plugin.manager.core.layout')->getThemeImplementations()
 * (for example, this is not the case for layouts managed from 
 * ui_patterns_layout_builder module), we need to move up to the layout builder's
 * sections level:
 * - using hook_entity_view_alter() while rendering an entity
 * - using hook_element_info_alter() while previewing.
 *
 * See also: https://www.drupal.org/project/drupal/issues/3080684 .
 */
function layout_builder_classes_element_info_alter(array &$types) {
  $types['layout_builder']['#pre_render'][] = '_layout_builder_classes_layout_builder_prerender';
}

/**
 * Callback from layout_builder_classes_element_info_alter().
 */
function _layout_builder_classes_layout_builder_prerender(array $element) {
  $styles_manager = \Drupal::service('plugin.manager.style_plugin');
  $layout_builder = $element['layout_builder'];
  /** @var \Drupal\layout_builder\SectionStorageInterface $section_storage */
  $section_storage = $element['#section_storage'];
  $delta = 0;
  $max = count($section_storage->getSections());
  foreach (Element::children($layout_builder) as $index) {
    if (isset($layout_builder[$index]['layout-builder__section']) && $delta < $max) {
      $section = $section_storage->getSection($delta);
      $selected = $section->getThirdPartySetting('layout_builder_classes', 'selected') ?: [];
      $extra = $section->getThirdPartySetting('layout_builder_classes', 'extra') ?: '';
      $styles_manager->addClasses($element['layout_builder'][$index]['layout-builder__section'], $selected, $extra);
      $delta++;
    }
  }
  return $element;
}

/**
 * Implementation of hook_entity_view_alter().
 *
 * Because hook_preproces_layout() deals only with layouts rendered by 
 * \Drupal::service('plugin.manager.core.layout')->getThemeImplementations()
 * (for example, this is not the case for layouts managed from 
 * ui_patterns_layout_builder module), we need to move up to the layout builder's
 * sections level:
 * - using hook_entity_view_alter() while rendering an entity
 * - using hook_element_info_alter() while previewing.
 */
function layout_builder_classes_entity_view_alter(array &$build, EntityInterface $entity, LayoutEntityDisplayInterface $display) {
  $styles_manager = \Drupal::service('plugin.manager.style_plugin');
  if ($display->isLayoutBuilderEnabled()) {
    $layout_builder = & $build['_layout_builder'];
    foreach (Element::children($layout_builder) as $delta) {
      $section = $display->getSection($delta);
      $selected = $section->getThirdPartySetting('layout_builder_classes', 'selected') ?: [];
      $extra = $section->getThirdPartySetting('layout_builder_classes', 'extra') ?: '';
      $styles_manager->addClasses($layout_builder[$delta], $selected, $extra);
    }
  }
}

