<?php

/**
 * @file
 * Contains module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\layout_builder\Plugin\SectionStorage\OverridesSectionStorage;
use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;

/*
 *
 * LAYOUT BUILDER COMPONENTS (BLOCKS)
 *
 */

/**
 * Implements hook_form_alter().
 *
 * Modify the configuration form for layout builder components (blocks).
 */
function ui_styles_layout_builder_form_alter(&$form, FormStateInterface $formState) {
  if ($form['#form_id'] === 'layout_builder_add_block' || $form['#form_id'] === 'layout_builder_update_block') {
    $styles_manager = \Drupal::service('plugin.manager.ui_styles');
    /** @var \Drupal\layout_builder\Form\ConfigureBlockFormBase $formObject */
    $formObject = $formState->getFormObject();
    $styles = $styles_manager->getDefinitions();
    if (!empty($styles)) {
      $component = $formObject->getCurrentComponent();
      $selected = $component->get('ui_styles') ?: [];
      $extra = $component->get('ui_styles_extra') ?: '';
      $styles_manager->alterForm($form, $styles, $selected, $extra);
      // Our submit handler must execute before the default one, because the
      // default handler stores the section & component data in the tempstore
      // and we need to update those objects before that happens.
      array_unshift($form['#submit'], '_ui_styles_layout_builder_submit_block_form');
    }
  }
}

/**
 * Custom submit handler for submitting LB block forms.
 *
 * Persists the configured block style to the component configuration data,
 * which is later persisted to section storage by layout builder's base form.
 */
function _ui_styles_layout_builder_submit_block_form(array $form, FormStateInterface $formState) {
  /** @var \Drupal\layout_builder\Form\ConfigureBlockFormBase $formObject */
  $formObject = $formState->getFormObject();
  $component = $formObject->getCurrentComponent();
  $selected = [];
  foreach ($form as $id => $element) {
    if (strpos($id, 'ui_styles_') === 0) {
      $value = $formState->getValue($id);
      $id = str_replace('ui_styles_', '', $id);
      $selected[$id] = $value;
    }
  }
  $component->set('ui_styles', $selected);
  $component->set('ui_styles_extra', $formState->getValue('_ui_styles_extra'));
}

/*
 *
 * LAYOUT BUILDER SECTIONS (LAYOUTS)
 *
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the configuration form for layout builder sections (layouts).
 */
function ui_styles_layout_builder_form_layout_builder_configure_section_alter(&$form, FormStateInterface $form_state, $form_id) {
  $styles_manager = \Drupal::service('plugin.manager.ui_styles');
  $styles = \Drupal::service('plugin.manager.ui_styles')->getDefinitions();
  if (!empty($styles)) {
    $formObject = $form_state->getFormObject();
    // Alter form only on section update, not on section creation, because of
    // the section delat shift.
    if (!$formObject->isUpdate()) {
      return;
    }
    if ($section = $formObject->getCurrentSection()) {
      $selected = $section->getThirdPartySetting('ui_styles', 'selected') ?: [];
      $extra = $section->getThirdPartySetting('ui_styles', 'extra') ?: '';
      $styles_manager->alterForm($form, $styles, $selected, $extra);
      // Our submit handler must execute before the default one, because the
      // default handler stores the section & component data in the tempstore
      // and we need to update those objects before that happens.
      array_unshift($form['#submit'], '_ui_styles_layout_builder_submit_section_form');
    }
  }
}

/**
 * Custom submit handler for submitting LB section forms.
 *
 * This is used to persist the selected style to the layout configuration
 * array, which layout builder's ConfigureSectionForm will persist to section
 * storage.
 */
function _ui_styles_layout_builder_submit_section_form(array $form, FormStateInterface $formState) {
  $selected = [];
  foreach ($form as $id => $element) {
    if (strpos($id, 'ui_styles_') === 0) {
      $value = $formState->getValue($id);
      $id = str_replace('ui_styles_', '', $id);
      $selected[$id] = $value;
    }
  }
  $formObject = $formState->getFormObject();
  $section = $formObject->getCurrentSection();
  $section->setThirdPartySetting('ui_styles', 'selected', $selected);
  $section->setThirdPartySetting('ui_styles', 'extra', $formState->getValue('_ui_styles_extra'));
}

/**
 * Implements hook_element_info_alter().
 *
 * Because hook_preproces_layout() deals only with layouts rendered by
 * \Drupal::service('plugin.manager.core.layout')->getThemeImplementations()
 * (for example, this is not the case for layouts managed from
 * ui_patterns_layout_builder module), we need to move up to the layout builder's
 * sections level:
 * - using hook_entity_view_alter() while rendering an entity
 * - using hook_element_info_alter() while previewing.
 *
 * See also: https://www.drupal.org/project/drupal/issues/3080684 .
 */
function ui_styles_layout_builder_element_info_alter(array &$types) {
  $types['layout_builder']['#pre_render'][] = '_ui_styles_layout_builder_layout_builder_prerender';
}

/**
 * Callback from ui_styles_layout_builder_element_info_alter().
 */
function _ui_styles_layout_builder_layout_builder_prerender(array $element) {
  $styles_manager = \Drupal::service('plugin.manager.ui_styles');
  $layout_builder = $element['layout_builder'];
  /** @var \Drupal\layout_builder\SectionStorageInterface $section_storage */
  $section_storage = $element['#section_storage'];
  $delta = 0;
  $max = count($section_storage->getSections());
  foreach (Element::children($layout_builder) as $index) {
    if (isset($layout_builder[$index]['layout-builder__section']) && $delta < $max) {
      $section = $section_storage->getSection($delta);
      $selected = $section->getThirdPartySetting('ui_styles', 'selected') ?: [];
      $extra = $section->getThirdPartySetting('ui_styles', 'extra') ?: '';
      $styles_manager->addClasses($element['layout_builder'][$index]['layout-builder__section'], $selected, $extra);
      $delta++;
    }
  }
  return $element;
}

/**
 * Implements hook_entity_view_alter().
 *
 * Because hook_preproces_layout() deals only with layouts rendered by
 * \Drupal::service('plugin.manager.core.layout')->getThemeImplementations()
 * (for example, this is not the case for layouts managed from
 * ui_patterns_layout_builder module), we need to move up to the layout builder's
 * sections level:
 * - using hook_entity_view_alter() while rendering an entity
 * - using hook_element_info_alter() while previewing.
 */
function ui_styles_layout_builder_entity_view_alter(array &$build, EntityInterface $entity, LayoutEntityDisplayInterface $display) {
  $styles_manager = \Drupal::service('plugin.manager.ui_styles');
  if ($display->isLayoutBuilderEnabled()) {
    $layout_builder = & $build['_layout_builder'];
    $layout_field_name = OverridesSectionStorage::FIELD_NAME;
    if ($entity->hasField($layout_field_name) && !$entity->get($layout_field_name)->isEmpty()) {
      foreach ($entity->get($layout_field_name) as $delta => $section_item) {
        /* @var Drupal\layout_builder\Plugin\Field\FieldType\LayoutSectionItem $section_item */
        $section = $section_item->get('section')->getValue();
        $selected = $section->getThirdPartySetting('ui_styles', 'selected') ?: [];
        $extra = $section->getThirdPartySetting('ui_styles', 'extra') ?: '';
        $styles_manager->addClasses($layout_builder[$delta], $selected, $extra);
      }
    }
    else {
      foreach ($display->getSections() as $delta => $section) {
        $selected = $section->getThirdPartySetting('ui_styles', 'selected') ?: [];
        $extra = $section->getThirdPartySetting('ui_styles', 'extra') ?: '';
        $styles_manager->addClasses($layout_builder[$delta], $selected, $extra);
      }
    }
  }
}
